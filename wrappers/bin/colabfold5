#!/bin/bash

CLUSTERSCRIPT="/cephfs2/public/ColabFold5/lmb/utils/submit_colabfold_cluster.csh"

VERSION="2023-03-22"
COLABFOLD="ColabFold 1.5.2"

#######################################

if [ $# -eq 0 ]; then
    echo
    echo "·································"
    echo
    echo "LMB ALPHAFOLD CLUSTER SUBMISSION"
    echo $VERSION
    echo
    echo $COLABFOLD
    echo
    echo "Usage:"
    echo "colabfold5 target.fasta [--option=value]"
    echo
    echo "ColabFold Basic Options:"
    echo "--jobname : Name to use as a prefix for the output files (default filename)"
    echo "--output : Output directory (default current directory)"
    echo "--num_models : Number of models to run (default 5, maximum 5)"
    echo
    echo "ColabFold Advanced Options"
    echo "--num_recycles : Number of recycles (0 to 48; default auto (20 recycles for multimer-v3 stopping once within tolerance, 3 recycles for other multimers))"
    echo "--recycle_stop : Tolerance for stopping recycles (0 to 1; default 0.5 for multimer-v3 and 0 for others)."
    echo "--max_msa : Cut down the MSA to increase uncertainty (none, 16-32, 32-64, 64-128, 256-512, 512-1024; default none)"
    echo "--use_dropout : Sample from the uncertainty (True, False; default False)"
    echo "--num_seeds : Sample from the uncertainty (1 to 16; default 1)"
    echo "--use_amber : Use amber relaxation (True, False; default False)"
    echo "--use_templates : Use templates up to the current date (True, False; default False)"
    echo "--custom_template : Path to a directory containing a template in mmCIF format."
    echo "                    Name must follow the PDB naming (four letters) and must contain"
    echo "                    _entity_poly_seq and _pdbx_audit_revision_history.revision_date"
    echo "--custom_msa : Path to multiple sequence alignment to use in prediction in a3m format"
    echo "--pair_mode : \"unpaired_paired\" = pair sequences from same species + unpaired MSA,"
    echo "             \"unpaired\" = seperate MSA for each chain,"
    echo "              \"paired\" = only use paired sequences. (default \"unpaired_paired\")"
    echo "--multimer_version : The version of multimer to use if predicting complexes (1, 2, or 3; default 3)"
    echo
    echo "LMB Cluster Options:"
    echo "--cpus : Number of CPUs to use (default 8)"
    echo "--gpus : Number of GPUs to use (default 1, maximum 4; this only helps with --partition=ml)"
    echo "--partition : Which partition to submit to (gpu or ml; default gpu). Only use ml for large predictions that cannot be done on gpu."
    echo "--memory : Memory to allocate (default 45G)"
    echo
    echo "Examples:"
    echo "colabfold5 sequences.fasta"
    echo "colabfold5 complex1.fasta --output=complex1_dropout --use_dropout=True"
    echo
    echo "·································"
    echo
    exit 1
fi

###############################
#Checks

# Are the arguments right

for var in "${@:2}"
do
    if [[ "$var" != *"="* ]]; then
        echo
        echo "Error: all options must have an equal sign when setting their value (check your $var option)"
        echo
        exit 1
    fi
done

list="--jobname --output --num_models --num_recycles --recycle_stop --max_msa --use_dropout --num_seeds --use_amber --use_templates --custom_template --custom_msa --pair_mode --multimer_version --cpus --gpus --memory --partition"

for var in "${@:2}"
do
    option="$(cut -d'=' -f1 <<<"$var")"
    [[ $list =~ (^|[[:space:]])$option($|[[:space:]]) ]] || { echo ; echo "Error: ${option} is not an option." ;  echo ; exit 1; }
done

for var in "${@:2}"
do
    ##
    [[ $list =~ (^|[[:space:]])$option($|[[:space:]]) ]] || { echo ; echo "Error: ${option} is not an option." ;  echo ; exit 1; }

    ##
    option="$(cut -d'=' -f1 <<<"$var")"
    argument="$(cut -d'=' -f2 <<<"$var")"

    if [ $option == "--num_models" ]
    then
        argumentlist="1 2 3 4 5"
        [[ $argumentlist =~ (^|[[:space:]])$argument($|[[:space:]]) ]] || { echo ; echo "Error: ${argument} is not a valid argument for ${option}." ;  echo ; exit 1; }
    fi

    if [ $option == "--max_msa" ]
    then
        argumentlist="none 16-32 32-64 64-128 256-512 512-1024"
        [[ $argumentlist =~ (^|[[:space:]])$argument($|[[:space:]]) ]] || { echo ; echo "Error: ${argument} is not a valid argument for ${option}." ;  echo ; exit 1; }
    fi

    if [ $option == "--use_dropout" ]
    then
        argumentlist="True true False false"
        [[ $argumentlist =~ (^|[[:space:]])$argument($|[[:space:]]) ]] || { echo ; echo "Error: ${argument} is not a valid argument for ${option}." ;  echo ; exit 1; }
    fi

    if [ $option == "--num_seeds" ]
    then
        argumentlist="1 2 4 8 16"
        [[ $argumentlist =~ (^|[[:space:]])$argument($|[[:space:]]) ]] || { echo ; echo "Error: ${argument} is not a valid argument for ${option}." ;  echo ; exit 1; }
    fi

    if [ $option == "--use_amber" ]
    then
        argumentlist="True true False false"
        [[ $argumentlist =~ (^|[[:space:]])$argument($|[[:space:]]) ]] || { echo ; echo "Error: ${argument} is not a valid argument for ${option}." ;  echo ; exit 1; }
    fi

    if [ $option == "--use_templates" ]
    then
        argumentlist="True true False false"
        [[ $argumentlist =~ (^|[[:space:]])$argument($|[[:space:]]) ]] || { echo ; echo "Error: ${argument} is not a valid argument for ${option}." ;  echo ; exit 1; }
    fi

    if [ $option == "--custom_template" ]
    then
        if [ ! -d "$argument" ]; then
            echo
            echo "Error: $argument directory does not exist."
            echo
            exit 1
        fi
    fi

    if [ $option == "--custom_msa" ]
    then
        if [ ! -f "$argument" ]; then
            echo
            echo "Error: $argument does not exist."
            echo
            exit 1
        fi
    fi

    if [ $option == "--pair_mode" ]
    then
        argumentlist="unpaired_paired unpaired paired"
        [[ $argumentlist =~ (^|[[:space:]])$argument($|[[:space:]]) ]] || { echo ; echo "Error: ${argument} is not a valid argument for ${option}." ;  echo ; exit 1; }
    fi

    if [ $option == "--gpus" ]
    then
        argumentlist="1 2 3 4"
        [[ $argumentlist =~ (^|[[:space:]])$argument($|[[:space:]]) ]] || { echo ; echo "Error: ${argument} is not a valid argument for ${option}." ;  echo ; exit 1; }
    fi

    if [ $option == "--memory" ]
    then
        if [[ "$argument" != *"G"* ]]; then
            [[ $argumentlist =~ (^|[[:space:]])$argument($|[[:space:]]) ]] || { echo ; echo "Error: the --memory option needs to have the letter G after the number." ;  echo ; exit 1; }
        fi
    fi

    if [ $option == "--partition" ]
    then
        argumentlist="gpu ml"
        [[ $argumentlist =~ (^|[[:space:]])$argument($|[[:space:]]) ]] || { echo ; echo "Error: ${argument} is not a valid argument for ${option}." ;  echo ; exit 1; }
    fi

    if [ $option == "--multimer_version" ]
    then
        argumentlist="1 2 3"
        [[ $argumentlist =~ (^|[[:space:]])$argument($|[[:space:]]) ]] || { echo ; echo "Error: ${argument} is not a valid argument for ${option}." ;  echo ; exit 1; }
    fi

    ##

done

#Does the file exist
if [ ! -f "$1" ]; then
    echo
    echo "Error: $1 does not exist."
    echo
    exit 1
fi

###############################
#Default variables set before reading the user's input

f=$1 #filename
t=${f##*/} #temporary variable
JOBNAME=${t%.*} #filename without path and extension
NUMMODELS=5
NUMRECYCLES=auto
RECYCLESTOP=auto
MAXMSA=none
USEDROPOUT=False
NUMSEEDS=1
NUMCPUS=8
NUMGPUS=1
MEMORY=45G
OUTPUT=.
USEAMBER=False
USETEMPLATES=False
CUSTOMTEMPLATE=none
CUSTOMMSA=none
PAIRMODE=unpaired_paired
MULTIMERVERSION=auto
PARTITION=gpu

###############################
#Parse input and override defaults

for i in "$@"; do
  case $i in
    -a=*|--jobname=*)
      JOBNAME="${i#*=}"
      shift
      ;;
    -b=*|--num_models=*)
      NUMMODELS="${i#*=}"
      shift
      ;;
    -c=*|--cpus=*)
      NUMCPUS="${i#*=}"
      shift
      ;;
    -d=*|--gpus=*)
      NUMGPUS="${i#*=}"
      shift
      ;;
    -e=*|--memory=*)
      MEMORY="${i#*=}"
      shift
      ;;
    -f=*|--output=*)
      OUTPUT="${i#*=}"
      shift
      ;;
    -g=*|--num_recycles=*)
      NUMRECYCLES="${i#*=}"
      shift
      ;;
    -h=*|--recycle_stop=*)
      RECYCLESTOP="${i#*=}"
      shift
      ;;
    -i=*|--max_msa=*)
      MAXMSA="${i#*=}"
      shift
      ;;
    -j=*|--use_dropout=*)
      USEDROPOUT="${i#*=}"
      shift
      ;;
    -k=*|--num_seeds=*)
      NUMSEEDS="${i#*=}"
      shift
      ;;
    -l=*|--use_amber=*)
      USEAMBER="${i#*=}"
      shift
      ;;
    -m=*|--use_templates=*)
      USETEMPLATES="${i#*=}"
      shift
      ;;
    -n=*|--custom_template=*)
      CUSTOMTEMPLATE="${i#*=}"
      shift
      ;;
    -o=*|--custom_msa=*)
      CUSTOMMSA="${i#*=}"
      shift
      ;;
    -p=*|--pair_mode=*)
      PAIRMODE="${i#*=}"
      shift
      ;;
    -q=*|--multimer_version=*)
      MULTIMERVERSION="${i#*=}"
      shift
      ;;
    -r=*|--partition=*)
      PARTITION="${i#*=}"
      shift
      ;;
    *)
      ;;
  esac
done

mkdir -p $OUTPUT

###############################
#Parse sequence

STITCHEDFILE=${OUTPUT}/stitchedsequence.tmp

cp $f "${OUTPUT}/temp1.tmp"
echo "" >> "${OUTPUT}/temp1.tmp"
while read line;do if [ "${line:0:1}" == ">" ]; then echo -e "\n"$line; else echo $line | tr -d '\n\r' ; fi; done < "${OUTPUT}/temp1.tmp" > "${OUTPUT}/temp2.tmp"
sed -i '/./,$!d' "${OUTPUT}/temp2.tmp"
grep -v '>' "${OUTPUT}/temp2.tmp" | tr '\n' ':' | sed 's/:$/\n/' | sed 's/ //g' > $STITCHEDFILE
rm -f "${OUTPUT}/temp1.tmp" "${OUTPUT}/temp2.tmp"

###############################
#Check if complex to make sure multimer version wasn't also supplied

ISCOMPLEX=`fgrep -o ":" $STITCHEDFILE | wc -l`

if [ $ISCOMPLEX = "0" ] ; then
    ###############################
    CLUSTERSCRIPT="/cephfs2/public/ColabFold2/lmb/utils/submit_colabfold_cluster.csh" #SINGLE CHAIN PREDICTION BROKEN AT THE MOMENT
    ###############################
    if [ $MULTIMERVERSION != "auto" ]; then
        echo
        echo "Error: you cannot specify multimer_version when you only have one chain."
        echo
        exit 1
    fi
fi

###############################
#Checks

if test -f "$OUTPUT/Colabfold.out"; then
    echo
    echo "·································"
    echo "Warning: this directory seems to already have Colabfold output files!"
    echo
    echo "You can use the --output=foldername to create a fresh directory for this run."
    echo
    read -p "Press enter to continue anyway or ctrl-c to quit."
    echo
fi

###############################
#Submit job

echo
echo "·································"
echo "LMB ALPHAFOLD CLUSTER SUBMISSION"
echo "version "$VERSION
echo
echo $COLABFOLD
echo
echo "Folding $JOBNAME."
echo
echo "Colabfold.out and log.txt will update as the job progresses."
echo
echo "Verify that the job is running with \"squeue -u yourusername\"."
echo
echo "Cancel this job with \"scancel JOBID\", where JOBID is the batch job number below."
echo
echo "sbatch command:" > ${OUTPUT}/submitcommand.txt
echo "sbatch --gres=gpu:"${NUMGPUS} "--cpus-per-task="${NUMCPUS} "--mem="${MEMORY} "--partition="${PARTITION}" --error="${OUTPUT}"/Colabfold.out" "--output="${OUTPUT}"/Colabfold.out" $CLUSTERSCRIPT $STITCHEDFILE $JOBNAME $NUMMODELS $NUMGPUS $OUTPUT $NUMRECYCLES $USEAMBER $USETEMPLATES $CUSTOMTEMPLATE $CUSTOMMSA $PAIRMODE $MULTIMERVERSION $RECYCLESTOP $MAXMSA $USEDROPOUT $NUMSEEDS >> ${OUTPUT}/submitcommand.txt

sbatch --gres=gpu:${NUMGPUS} --cpus-per-task=${NUMCPUS} --mem=${MEMORY} --partition=${PARTITION} --error="${OUTPUT}/Colabfold.out" --output="${OUTPUT}/Colabfold.out" $CLUSTERSCRIPT $STITCHEDFILE $JOBNAME $NUMMODELS $NUMGPUS $OUTPUT $NUMRECYCLES $USEAMBER $USETEMPLATES $CUSTOMTEMPLATE $CUSTOMMSA $PAIRMODE $MULTIMERVERSION $RECYCLESTOP $MAXMSA $USEDROPOUT $NUMSEEDS

echo

exit 0
